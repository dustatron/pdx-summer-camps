// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  // NOTE: When using postgresql, mysql or sqlserver, uncomment the @db.Text annotations in model Account below
  // Further reading:
  // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
  // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
  url      = env("DATABASE_URL")
}

model Example {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Necessary for Next auth
model Account {
  id                String  @id @default(cuid())
  userId            Int
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?  @db.Text
  access_token      String?  @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?  @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       Int
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade) 
}

model User {
  id            Int    @id @default(autoincrement())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  role          Role @default(USER)
  accounts      Account[]
  sessions      Session[]
  camps         CampAuthor[]
  profile       Profile[]
  favorites     Favorite[]

}

model Profile {
  id           String   @id @default(cuid())
  bio          String?
  displayName  String?
  userId       Int
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade) 
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Camp {
    id           String @id @default(cuid())
    title        String
    address      String
    link         String?
    website      String
    email        String?
    phone        String?
    facebook     String?
    instagram    String?
    description  String?
    image        CampImage[]
    lat          Float
    lng          Float
    place_id     String?
    tags         String[]
    quadrant     String[]
    ages         String[]
    price        Float?
    dateStart    DateTime?
    dateEnd      DateTime?
    author       CampAuthor[]
    favorites    Favorite[]
}

model CampImage {
  id                  String   @id @default(cuid())
  campId              String
  src                 String
  asset_id            String?
  created_at          String?
  folder              String?
  original_filename   String?
  public_id           String?
  camp                Camp   @relation(fields: [campId], references: [id], onDelete: Cascade)
}

model CampAuthor {
  id           String   @id @default(cuid())
  campId       String
  userId       Int
  authorName   String
  campName     String
  camp         Camp   @relation(fields: [campId], references: [id], onDelete: Cascade)
  user         User   @relation(fields: [userId], references: [id])
}

model Favorite {
    id           String   @id @default(cuid())
    campId       String
    userId       Int
    createdAt              DateTime            @default(now())
    camp         Camp   @relation(fields: [campId], references: [id], onDelete: Cascade)
    user         User   @relation(fields: [userId], references: [id])
}

enum Role {
  USER
  PROVIDER
  ADMIN
}
