// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  // NOTE: When using postgresql, mysql or sqlserver, uncomment the @db.Text annotations in model Account below
  // Further reading:
  // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
  // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
  // shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
  url      = env("DATABASE_URL")
}

model Example {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Necessary for Next auth
model Account {
  id                String  @id @default(cuid())
  userId            Int
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?  @db.Text
  access_token      String?  @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?  @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       Int
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade) 
}

model User {
  name                String?
  id                  Int    @id @default(autoincrement())
  email               String?   @unique
  emailVerified       DateTime?
  image               String?
  role                Role @default(USER)
  accounts            Account[]
  sessions            Session[]
  camps               CampAuthor[]
  providers           ProviderAuthor[]
  profile             Profile[]
  favorites           Favorite[]
  providerFavorites   FavoriteProvider[]

}

model Profile {
  id           String   @id @default(cuid())
  bio          String?
  displayName  String?
  userId       Int
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade) 
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Provider {
  id            String @id          @default(cuid())
  createdAt     DateTime            @default(now())
  updatedAt     DateTime            @updatedAt
  email         String
  contact       String?
  ages          String[]
  pickUp        String?
  dropOff       String?
  title         String
  contactName   String?
  facebook      String?
  instagram     String?
  address       String
  place_id      String?
  lat           Float
  lng           Float
  phone         String?
  website       String
  brief         String?
  description   String?
  tags          String[]
  author        ProviderAuthor[]
  camps         Camp[] 
  image         ProviderImage[]
  favorites     FavoriteProvider[]

}

model Camp {
    id           String @id    @default(cuid())
    createdAt    DateTime      @default(now())
    title        String
    address      String
    link         String?
    website      String
    email        String?
    phone        String?
    facebook     String?
    instagram    String?
    description  String?
    contactName  String?
    lat          Float
    lng          Float
    place_id     String?
    brief        String?
    pickUp       String?
    dropOff      String?
    tags         String[]
    quadrant     String[]
    ages         String[]
    price        String?
    dateStart    String?
    dateEnd      String?
    status       Status @default(UNKNOWN)
    image        CampImage[]
    author       CampAuthor[]
    favorites    Favorite[]
    providerId   String?
    provider     Provider?  @relation(fields: [providerId], references: [id])
}

model CampImage {
  id                  String   @id @default(cuid())
  campId              String
  src                 String
  asset_id            String?
  created_at          String?
  folder              String?
  original_filename   String?
  public_id           String?
  camp                Camp   @relation(fields: [campId], references: [id], onDelete: Cascade)
}
model ProviderImage {
  id                  String   @id @default(cuid())
  providerId          String
  src                 String
  asset_id            String?
  created_at          String?
  folder              String?
  original_filename   String?
  public_id           String?
  provider            Provider   @relation(fields: [providerId], references: [id], onDelete: Cascade)
}

model ProviderAuthor {
  id               String   @id @default(cuid())
  providerId       String
  userId           Int
  providerName     String
  authorName       String
  provider         Provider   @relation(fields: [providerId], references: [id], onDelete: Cascade)
  user             User   @relation(fields: [userId], references: [id])
}

model CampAuthor {
  id           String   @id @default(cuid())
  campId       String
  userId       Int
  authorName   String
  campName     String
  camp         Camp   @relation(fields: [campId], references: [id], onDelete: Cascade)
  user         User   @relation(fields: [userId], references: [id])
}

model Favorite {
    id           String    @id @default(cuid())
    campId       String
    userId       Int
    createdAt    DateTime  @default(now())
    camp         Camp      @relation(fields: [campId], references: [id], onDelete: Cascade)
    user         User      @relation(fields: [userId], references: [id])
}
model FavoriteProvider {
    id           String    @id @default(cuid())
    providerId       String
    userId       Int
    createdAt    DateTime  @default(now())
    provider     Provider  @relation(fields: [providerId], references: [id], onDelete: Cascade)
    user         User      @relation(fields: [userId], references: [id])
}

enum Role {
  USER
  PROVIDER
  ADMIN
}

enum Status {
  OPEN
  FULL
  UNKNOWN
}